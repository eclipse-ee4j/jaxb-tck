<?xml version='1.0'?>
<!DOCTYPE TestGroup SYSTEM  "testgenspec.dtd" >
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- Validator is deprecated since JAXB 2.0 . Test group deleted-->
<TestGroup ID="Validator_" Deleted="true">
    <TestGroupDocumentation>
        <Title>Providers Validator implementation tests. (content tree test)</Title>
        <Description>Compile a simple schema to create a java binding classes. Test an
        available implementation of the jakarta.xml.bind.Validator interface using this
        context.
        </Description>
    </TestGroupDocumentation>
    <TestGroupAttributes>
      <AttrElem Name="scInfo">@(#)Validator_CTTests.test.xml	1.4 07/04/16</AttrElem>
      <AttrElem Name="testType">JAXBXMLSchemaTest</AttrElem>
    </TestGroupAttributes>
    <CodeSet>
        <Import>jakarta.xml.bind.JAXBContext</Import>
        <Import>jakarta.xml.bind.JAXBException</Import>
        <Import>jakarta.xml.bind.Validator</Import>
        <Import>jakarta.xml.bind.helpers.DefaultValidationEventHandler</Import>
        <Import>jakarta.xml.bind.ValidationEventHandler</Import>
        <SupportCode><![CDATA[
    Validator getValidator() throws JAXBException {
        JAXBContext jc = getJAXBContext();
        return jc.createValidator();
    }]]></SupportCode>
        <ExternalSupportClass SourceName="Validator.xsd"/>
    </CodeSet>

    <TestCase ID="Get001">
        <TestCaseDocumentation>
            <Title>getEventHandler() returns default event handler if one hasn't been set.</Title>
            <Description>
                The default event handler is returned by getEventHandler() if no handler has been set.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <TestCode><![CDATA[
         try {
             ValidationEventHandler veh = getValidator().getEventHandler();

             if (veh == null) {
                 return Status.failed("getEventHandler() returns null");
             }

             if (!(veh instanceof DefaultValidationEventHandler)) {
                 return Status.failed("what getEventHandler() returns is not an instance of DefaultValidationEventHandler"
                                    + ": " + veh.getClass().getName());
             }
             
             return Status.passed("OKAY");
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

    <TestCase ID="Set001">
        <TestCaseDocumentation>
            <Title>getEventHandler() returns current event handler if one has been set.</Title>
            <Description>
                setEventHandler(ValidationEventHandler handler) set the current event handler.
                getEventHandler() returns this handler.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <TestCode><![CDATA[
         try {
             Validator validator = getValidator();

             DefaultValidationEventHandler eh = new DefaultValidationEventHandler();

             validator.setEventHandler(eh);

             ValidationEventHandler veh = validator.getEventHandler();

             if (veh != eh) {
                 return Status.failed("getEventHandler() returns " + veh + " instead of " + eh);
             }
             
             return Status.passed("OKAY");
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

    <TestCase ID="Validate001">
        <TestCaseDocumentation>
            <Title>validate(Object subrootObj) validates the Java content tree starting at subrootObj.</Title>
            <Description>
                validate(Object subrootObj) validates the Java content tree starting at subrootObj.
                subrootObj is a valid content subtree of the root element, so the validate 
                method should return true.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <CodeSet>
            <ExternalData SourceName="Validator.xml" Type="iodata"/>
        </CodeSet>
        <TestCode><![CDATA[
         try {
             Validator validator = getValidator();

             Root root = (Root)unmarshal("Validator.xml");
             Object subtree = root.getElementOrElementRefOrElementRefs().get(0);

             boolean isValid = validator.validate(subtree);

             if (!isValid) {
                 return Status.failed("validate(subtree) returns false for a valid subtree");
             }
             
             return Status.passed("OKAY");
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

    <TestCase ID="Validate002">
        <TestCaseDocumentation>
            <Title>validate(Object subrootObj) validates the Java content tree starting at subrootObj.</Title>
            <Description>
                validate(Object subrootObj) validates the Java content tree starting at subrootObj.
                subrootObj is an invalid content subtree, so the validate 
                method should return false or throw ValidationException.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.TypeConstraintException</Import>
            <Import>jakarta.xml.bind.ValidationException</Import>
            <Import>jakarta.xml.bind.ValidationEvent</Import>
        </CodeSet>
        <TestCode><![CDATA[
         try {
             Validator validator = getValidator();
             validator.setEventHandler(new ValidationEventHandler() {
                 public boolean handleEvent(ValidationEvent event) {
                     return (event.getSeverity() != ValidationEvent.FATAL_ERROR);
                 }
             });

             RootType.Element elem = (new ObjectFactory()).createRootTypeElement();
             elem.setValue("11"); // invalid ID

             boolean isValid = validator.validate(elem);

             if (isValid) {
                 return Status.failed("validate(elem) returns true for an invalid subtree");
             }
             
             return Status.passed("OKAY");
        } catch (TypeConstraintException tce) {
             // could not set an invalid value "11"
             return Status.passed("OKAY, " + tce);
        } catch (ValidationException ve) {
             return Status.passed("OKAY, " + ve);
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

    <TestCase ID="Validate003">
        <TestCaseDocumentation>
            <Title>validate(Object subrootObj) validates the Java content tree starting at subrootObj.</Title>
            <Description>
                validate(Object subrootObj) validates the Java content tree starting at subrootObj.
                subrootObj is an invalid content subtree of the root element and the validation event
                handler always returns false, so the validate method should 
                throw ValidationException.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.TypeConstraintException</Import>
            <Import>jakarta.xml.bind.ValidationException</Import>
            <Import>jakarta.xml.bind.ValidationEvent</Import>
            <ExternalData SourceName="Validator.xml" Type="iodata"/>
        </CodeSet>
        <TestCode><![CDATA[
         try {
             Validator validator = getValidator();
             validator.setEventHandler(new ValidationEventHandler() {
                 public boolean handleEvent(ValidationEvent event) {
                     return false;
                 }
             });

             Root root = (Root)unmarshal("Validator.xml");
             RootType.Element elem = (RootType.Element)(root.getElementOrElementRefOrElementRefs().get(0));
             elem.setValue("11"); // invalid ID

             boolean isValid = validator.validate(elem);

             if (isValid) {
                 return Status.failed("validate(elem) returns true for an invalid subtree");
             }
             
             return Status.failed("ValidationException is not thrown");
        } catch (TypeConstraintException tce) {
             // could not set an invalid value "11"
             return Status.passed("OKAY, " + tce);
        } catch (ValidationException ve) {
             return Status.passed("OKAY, " + ve);
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

    <TestCase ID="Validate004">
        <TestCaseDocumentation>
            <Title>validate(Object subrootObj) validates the Java content tree starting at subrootObj.</Title>
            <Description>
                validate(Object subrootObj) validates the Java content tree starting at subrootObj.
                subrootObj is an IDREF that refers to an element that does not belong to the 
                document. The method validate(subrootObj) should return true.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.ValidationException</Import>
            <Import>jakarta.xml.bind.ValidationEvent</Import>
            <ExternalData SourceName="Validator.xml" Type="iodata"/>
        </CodeSet>
        <TestCode><![CDATA[
         try {
             Validator validator = getValidator();
             validator.setEventHandler(new ValidationEventHandler() {
                 public boolean handleEvent(ValidationEvent event) {
                     return false;
                 }
             });

             RootType.Element elem = (new ObjectFactory()).createRootTypeElement();
             elem.setValue("e002"); 

             Root root = (Root)unmarshal("Validator.xml");
             RootType.ElementRef elemRef = (RootType.ElementRef)(root.getElementOrElementRefOrElementRefs().get(1));
             elemRef.setValue(elem); // reference to an element that does not belong to the document

             if (! (validator.validate(elemRef))) {
                 return Status.failed("validate(elemRef) returns false");
             };

             // no validation exception is expected
             return Status.passed("OKAY");
        } catch (ValidationException ve) {
             return Status.failed("validate(elemRef) should not detect ID/IDREF constraint");
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

    <TestCase ID="Validate005">
        <TestCaseDocumentation>
            <Title>validateRoot(Object rootObj) validates the Java content tree rooted at rootObj.</Title>
            <Description>
                validateRoot(Object rootObj) validates the Java content tree rooted at rootObj.
                rootObj is a valid content tree, so the method validateRoot(rootObj) should 
                return true.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.ValidationException</Import>
            <Import>jakarta.xml.bind.ValidationEvent</Import>
            <ExternalData SourceName="Validator.xml" Type="iodata"/>
        </CodeSet>
        <TestCode><![CDATA[
         try {
             Validator validator = getValidator();

             Root root = (Root)unmarshal("Validator.xml");

             if (validator.validateRoot(root)) {
                 return Status.passed("OKAY");
             };

             return Status.failed("validateRoot(root) returns false");
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

    <TestCase ID="Validate006">
        <TestCaseDocumentation>
            <Title>validateRoot(Object rootObj) validates the Java content tree rooted at rootObj.</Title>
            <Description>
                validateRoot(Object rootObj) validates the Java content tree rooted at rootObj.
                One of the documents IDREF refers to an element that does not belong to the 
                document. The validation event handler always returns false. So the method 
                validateRoot(rootObj) should throw ValidationException.
            </Description>
            <Author>Evgueni Rouban</Author>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.ValidationException</Import>
            <Import>jakarta.xml.bind.ValidationEvent</Import>
            <ExternalData SourceName="Validator.xml" Type="iodata"/>
        </CodeSet>
        <TestCode><![CDATA[
         try {
             Validator validator = getValidator();
             validator.setEventHandler(new ValidationEventHandler() {
                 public boolean handleEvent(ValidationEvent event) {
                     return false;
                 }
             });

             RootType.Element elem = (new ObjectFactory()).createRootTypeElement();
             elem.setValue("e002"); 

             Root root = (Root)unmarshal("Validator.xml");
             RootType.ElementRef elemRef = (RootType.ElementRef)(root.getElementOrElementRefOrElementRefs().get(1));
             elemRef.setValue(elem); // reference to an element that does not belong to the document

             if (validator.validateRoot(root)) {
                 return Status.failed("validateRoot(root) returns true instead of throwing ValidationException");
             };

             return Status.failed("no validation exception is thrown");
        } catch (ValidationException ve) {
             return Status.passed("OKAY");
        } catch (JAXBException jaxbe) {
            jaxbe.printStackTrace(ref);
            return Status.failed(jaxbe.toString());
        }
        ]]></TestCode>
    </TestCase>

</TestGroup>
<!-- Ident: @(#)Validator_CTTests.test.xml	1.4 07/04/16 -->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TestGroup SYSTEM "testgenspec.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<TestGroup ID="JAXBElement">
  <TestGroupDocumentation>
    <Title>Provides JAXBElement implementation tests</Title>
    <TestedPackage>jakarta.xml.bind</TestedPackage>
    <TestedClass>JAXBElement</TestedClass>
    <Author>Igor Tseytin</Author>
  </TestGroupDocumentation>
  <TestGroupAttributes>
    <AttrElem Name="tdFile">index</AttrElem>
    <AttrElem Name="scInfo">@(#)JAXBElement.test.xml	1.3 07/03/21</AttrElem>
    <AttrElem Name="testType">MultiTest</AttrElem>
    <Keyword>runtime</Keyword>
  </TestGroupAttributes>
  <CodeSet>
    <Import>javax.xml.namespace.QName</Import>
    <Import>jakarta.xml.bind.JAXBElement</Import>
    <BaseClass>MultiTest</BaseClass>
    <SupportCode>
<![CDATA[
    QName name = new QName("LocalPart");

    void assertT( boolean val, String msg ){
        if( !val )
            throw new RuntimeException(msg);
    }
]]>
    </SupportCode>
  </CodeSet>

  <TestCase ID="Ctor001">
    <TestCaseDocumentation>
      <TestCaseSpec><InlineAssertion>Construct an xml element instance.</InlineAssertion></TestCaseSpec>
    </TestCaseDocumentation>
    <TestCode><![CDATA[
    try {
        {
            JAXBElement<Long> e = new JAXBElement<Long>(name, Long.class, null, 5L);
            assertT( name.equals( e.getName() ), "names are not equal" );
            assertT( Long.class == e.getDeclaredType(), "declaredTypes are not equal" );
            assertT( JAXBElement.GlobalScope.class == e.getScope(), "scopes are not equal" );
            assertT( e.getValue().equals( 5L ), "values are not equal" );
            assertT( e.isGlobalScope(), "scope isn't global" );
            assertT( !e.isNil(), "value is nil" );
        }
        {
            JAXBElement<String> e = new JAXBElement<String>(name, String.class, JAXBElement.GlobalScope.class, "5");
            assertT( name.equals( e.getName() ), "names are not equal" );
            assertT( String.class == e.getDeclaredType(), "declaredTypes are not equal" );
            assertT( JAXBElement.GlobalScope.class == e.getScope(), "scopes are not equal" );
            assertT( "5".equals( e.getValue() ), "values are not equal" );
            assertT( e.isGlobalScope(), "scope isn't global" );
            assertT( !e.isNil(), "value is nil" );
        }
        {
            JAXBElement<Integer> e = new JAXBElement<Integer>(name, Integer.class, 5);
            assertT( name.equals( e.getName() ), "names are not equal" );
            assertT( Integer.class == e.getDeclaredType(), "declaredTypes are not equal" );
            assertT( JAXBElement.GlobalScope.class == e.getScope(), "scopes are not equal" );
            assertT( e.getValue().equals( 5 ), "values are not equal" );
            assertT( e.isGlobalScope(), "scope isn't global" );
            assertT( !e.isNil(), "value is nil" );
        }
    } catch( Exception x ){
        x.printStackTrace(ref);
        return Status.failed( x.toString() );
    }
    return Status.passed("Ok");
    ]]></TestCode>
  </TestCase>
  <TestCase ID="setNil001">
    <TestCaseDocumentation>
      <TestCaseSpec><InlineAssertion>Set whether this element has nil content.</InlineAssertion></TestCaseSpec>
    </TestCaseDocumentation>
    <TestCode><![CDATA[
    try {
        JAXBElement<Long> e = new JAXBElement<Long>(name, Long.class, null, 5L);
        assertT( !e.isNil(), "value is nil" );
        e.setNil(true);
        assertT( e.isNil(), "value isn't nil" );
        e.setNil(false);
        assertT( !e.isNil(), "value is nil" );
    } catch( Exception x ){
        x.printStackTrace(ref);
        return Status.failed( x.toString() );
    }
    return Status.passed("Ok");
    ]]></TestCode>
  </TestCase>
  <TestCase ID="setValue001">
    <TestCaseDocumentation>
      <TestCaseSpec><InlineAssertion>Set the content model and attributes of this xml element. When this property is set to null, isNil() must by true.</InlineAssertion></TestCaseSpec>
    </TestCaseDocumentation>
    <TestCode><![CDATA[
    try {
        JAXBElement<Long> e = new JAXBElement<Long>(name, Long.class, null, 5L);
        assertT( e.getValue().equals( 5L ), "values are not equal 1" );
        e.setValue( 6L );
        assertT( e.getValue().equals( 6L ), "values are not equal 2" );
        e.setValue( null );
        assertT( e.isNil(), "value isn't nil" );
    } catch( Exception x ){
        x.printStackTrace(ref);
        return Status.failed( x.toString() );
    }
    return Status.passed("Ok");
    ]]></TestCode>
  </TestCase>
</TestGroup>
<!-- Ident: @(#)JAXBElement.test.xml	1.3 07/03/21 -->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TestGroup SYSTEM "testgenspec.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<TestGroup ID="pattern2_Validate">
    <TestGroupDocumentation>
        <Title><![CDATA[pattern2 Validate Tree Content tests]]></Title>
        <Description><![CDATA[
      The tests for validating the content of changed trees got by unmarshalling
      of the pattern-2.xsd based XML documents or created dynamically 
      via ObjectFactory.
      The schema defines a base64Binary restricted SimpleType with pattern value 
      "[a-zA-Z0-9+/]{8}".
      Various XML documents specify various values in the element.
      ]]></Description>
    </TestGroupDocumentation>
    <TestGroupAttributes>
        <AttrElem Name="scInfo">@(#)pattern-2_Validate.test.xml	1.5 08/01/24</AttrElem>
        <AttrElem Name="testType">JAXBXMLSchemaTest</AttrElem>
    </TestGroupAttributes>
    <CodeSet>
        <Import>jakarta.xml.bind.*</Import>
        <Import>jakarta.xml.bind.TypeConstraintException</Import>
        <SupportCode>
    final String[] validValues = {
      "cnZ0c2Fk",
      "b3loYXJ1",
      "aXZwdnhk",
      "bXd2bG10",
      "anFkeXN3",
      "AAA/AAA+",
    };
    
    final String[] invalidValues = {
        "", 
        "AAAA",
        "AAAAAAA=",
        "CAFEAA==",
        "AAAAAAAAAAAA"
    };
    
    JAXBElement&lt;byte[]&gt; elemObj;

    static final String base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    static byte [] getBytes(String base64) {
        if (base64.length()%4 != 0) {
            throw new TestFailureException("test error: wrong length of base64 encoded data:" + base64);
        }
        int nOctets = base64.length() / 4 * 3;
        if (base64.endsWith("==")) {
            nOctets -= 2;
        } else if (base64.endsWith("=")) {
            nOctets -= 1;
        }
        byte [] bytes = new byte[nOctets];
        for (int i = (base64.length() / 4) - 1; i &gt;= 0; --i) {
            int threeBytes = ((base64Chars.indexOf(base64.charAt(i*4)) &amp; 0x3f) &lt;&lt; 18)
                       | ((base64Chars.indexOf(base64.charAt(i*4 + 1)) &amp; 0x3f) &lt;&lt; 12)
                       | ((base64Chars.indexOf(base64.charAt(i*4 + 2)) &amp; 0x3f) &lt;&lt; 6)
                       | ((base64Chars.indexOf(base64.charAt(i*4 + 3)) &amp; 0x3f));
            bytes[i*3] = (byte)((threeBytes &gt;&gt; 16) &amp; 0xff);
            if (base64.charAt(i*4 + 2) != '=') {
                bytes[i*3 + 1] = (byte)((threeBytes &gt;&gt; 8) &amp; 0xff);
                if (base64.charAt(i*4 + 3) != '=') {
                    bytes[i*3 + 2] = (byte)((threeBytes) &amp; 0xff);
                }
            }
        }
        return bytes;
    }

    Status testInvalid() {
        for (int i = 0; i &lt; invalidValues.length; ++i){
            
                elemObj.setValue(getBytes(invalidValues[i]));
                Status status = validate(elemObj);
                if (status.isPassed()) {
                    return Status.failed("" + invalidValues[i] + " is unexpectedly valid");
                }
            
        }
        return Status.passed("OK");
    }

    Status testValid() {
        for (int i = 0; i &lt; validValues.length; ++i){
            elemObj.setValue(getBytes(validValues[i]));
            Status status = validate(elemObj);
            if (!status.isPassed()){
                return Status.failed("" + validValues[i] + " is unexpectedly invalid");
            }
        }
        return Status.passed("OKAY");
    }
      </SupportCode>
        <ExternalSupportClass SourceName="pattern-2.xsd"/>
        <ExternalData Type="iodata" SourceName="pattern2_Validate.sig"/>
    </CodeSet>
    <TestCase ID="Unmarshalled001">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML base64Binary pattern-2.xsd, validate unmarshalled then legally changed content tree]]></Title>
            <Description><![CDATA[
The test unmarshalls pattern-2-4.xml document, sets 
valid values 
      "cnZ0c2Fk",
      "b3loYXJ1",
      "aXZwdnhk",
      "bXd2bG10",
      "anFkeXN3",
      "AAA/AAA+",
for the base64Binary restricted SimpleType NISTSchema-base64Binary-pattern-2 element and 
expects validation to pass. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <ExternalData Type="iodata" SourceName="pattern-2-4.xml"/>
            <ExternalData Type="iodata" SourceName="pattern2_validate-pattern-2-4.jbx"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        elemObj = (JAXBElement<byte[]>)unmarshal("pattern-2-4.xml");
        return testValid();
      ]]></TestCode>
    </TestCase>
    <TestCase ID="Unmarshalled002">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML base64Binary pattern-2.xsd, validate unmarshalled then illegally changed content tree]]></Title>
            <Description><![CDATA[
The test unmarshalls pattern-2-4.xml document, sets the invalid values 
        "", 
        "AAAA",
        "AAAAAAA=",
        "CAFEAA==",
        "AAAAAAAAAAAA"
for the base64Binary
restricted SimpleType NISTSchema-base64Binary-pattern-2 element and expects 
validation to fail. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <ExternalData Type="iodata" SourceName="pattern-2-4.xml"/>
            <ExternalData Type="iodata" SourceName="pattern2_validate-pattern-2-4.jbx"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        elemObj = (JAXBElement<byte[]>)unmarshal("pattern-2-4.xml");
        return testInvalid();
      ]]></TestCode>
    </TestCase>
    <TestCase ID="Created001">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML base64Binary pattern-2.xsd, validate created content tree with valid content]]></Title>
            <Description><![CDATA[
The test creates the base64Binary restricted SimpleType NISTSchema-base64Binary-pattern-2 element with
a valid value, sets its value to 
      "cnZ0c2Fk",
      "b3loYXJ1",
      "aXZwdnhk",
      "bXd2bG10",
      "anFkeXN3",
      "AAA/AAA+",
and expects validation to pass. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.JAXBException</Import>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        
            elemObj = (JAXBElement<byte[]>)(new ObjectFactory()).createNISTSchemaBase64BinaryPattern2(getBytes(validValues[0]));
        
        return testValid();
      ]]></TestCode>
    </TestCase>
    <TestCase ID="Created002">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML base64Binary pattern-2.xsd, validate created content tree with invalid content]]></Title>
            <Description><![CDATA[
The test creates the base64Binary restricted SimpleType NISTSchema-base64Binary-pattern-2 element with
a valid value, sets its value to 
        "", 
        "AAAA",
        "AAAAAAA=",
        "CAFEAA==",
        "AAAAAAAAAAAA"
then expects validation to fail. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.JAXBException</Import>
            <ExternalData Type="iodata" SourceName="pattern-2-4.xml"/>
            <ExternalData Type="iodata" SourceName="pattern2_validate-pattern-2-4.jbx"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        
            elemObj = (JAXBElement<byte[]>)(new ObjectFactory()).createNISTSchemaBase64BinaryPattern2(getBytes(validValues[0]));
        
        return testInvalid();
      ]]></TestCode>
    </TestCase>
</TestGroup>

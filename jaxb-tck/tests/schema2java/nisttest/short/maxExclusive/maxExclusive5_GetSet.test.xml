<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TestGroup SYSTEM "testgenspec.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<TestGroup ID="maxExclusive5_GetSet">
    <TestGroupDocumentation>
        <Title><![CDATA[maxExclusive5 GetSet Tree Content tests  ]]></Title>
        <Description><![CDATA[
      The tests for checking the content of trees got by unmarshalling
      of the maxExclusive-5.xsd based XML documents and created dynamically via ObjectFactory. 
      The schema defines a short restricted SimpleType with maxExclusive value 32767.
      Various XML documents specify various values in the element.
      ]]></Description>
    </TestGroupDocumentation>
    <TestGroupAttributes>
        <AttrElem Name="scInfo">@(#)maxExclusive5_GetSet.test.xml	1.6 08/01/24</AttrElem>
        <AttrElem Name="testType">JAXBXMLSchemaTest</AttrElem>
    </TestGroupAttributes>
    <CodeSet>
        <Import>jakarta.xml.bind.*</Import>
        <ExternalSupportClass SourceName="maxExclusive-5.xsd"/>
        <ExternalData Type="iodata" SourceName="maxExclusive5_GetSet.sig"/>
    </CodeSet>
    <TestCase ID="GetSet001">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML short maxExclusive-5.xsd, unmarshalled content tree GetSet test]]></Title>
            <Description><![CDATA[
The test unmarshalls maxExclusive-5-1.xml,...,maxExclusive-5-5.xml documents which specify
the values -32768, -19005, 15667, 2217, 32766 for the short restricted SimpleType NISTSchema-short-maxExclusive-5
element and expects that elemObj.getValue() returns specified in xml value, then invokes 
elemObj.setValue(short), elemObj.getValue() should return set value.
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <ExternalData Type="iodata" SourceName="maxExclusive-5-1.xml"/>
            <ExternalData Type="iodata" SourceName="maxExclusive-5-2.xml"/>
            <ExternalData Type="iodata" SourceName="maxExclusive-5-3.xml"/>
            <ExternalData Type="iodata" SourceName="maxExclusive-5-4.xml"/>
            <ExternalData Type="iodata" SourceName="maxExclusive-5-5.xml"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        String[] xmlDocNames = {
            "maxExclusive-5-1.xml", "maxExclusive-5-2.xml", "maxExclusive-5-3.xml",
            "maxExclusive-5-4.xml", "maxExclusive-5-5.xml"
        };
        short[] expectedValues = {(short)-32768, (short)-19005, (short)15667, (short)2217, (short)32766};
        short[] anExpectedValues = {(short)0, (short)-32768, (short)-15667, (short)2217, (short)-3276};
        
        for (int i = 0; i < xmlDocNames.length; ++i){
            JAXBElement<Short> elemObj = (JAXBElement<Short>)unmarshal(xmlDocNames[i]);
            if (elemObj.getValue() != expectedValues[i]){
                return Status.failed("used XML document: " + xmlDocNames[i] + ", elemObj.getValue() != " + expectedValues[i]);
            }
            elemObj.setValue(anExpectedValues[i]);
            if (elemObj.getValue() != anExpectedValues[i]){
                return Status.failed("used XML document: " + xmlDocNames[i] + ", elemObj.setValue(" + anExpectedValues[i] + 
                    ") invoked, " + "elemObj.getValue() != " + anExpectedValues[i]);
            }
        }
        return Status.passed("OKAY");

      ]]></TestCode>
    </TestCase>
    <TestCase ID="GetSet002">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML short maxExclusive-5.xsd GetSet test for dynamically created content tree ]]></Title>
            <Description><![CDATA[
The test creates an instance of short restricted SimpleType NISTSchema-short-maxExclusive-5 type
with the values -32768, -19005, 15667, 2217, 32766 and expects that elemObj.getValue() returns specified 
values, then invokes elemObj.setValue(short) with various values, elemObj.getValue() should return
set values.
         ]]></Description>
        </TestCaseDocumentation>
        <TestCode SourceLang="java"><![CDATA[

        short[] setValues = {(short)-32768, (short)-19005, (short)15667, (short)2217, (short)32766};
        short[] anSetValues = {(short)0, (short)-32768, (short)-15667, (short)2217, (short)-3276};

        JAXBElement<Short> elemObj = null;
        for (int i = 0; i < setValues.length; ++i){
            
                elemObj = (JAXBElement<Short>)(new ObjectFactory()).createNISTSchemaShortMaxExclusive5(setValues[i]);
            
            if (elemObj.getValue() != setValues[i]){
                return Status.failed("dynamically created JAXBElement<Short>, elemObj.getValue() != " + setValues[i]);
            }
            elemObj.setValue(anSetValues[i]);
            if (elemObj.getValue() != anSetValues[i]){
                return Status.failed("dynamically created JAXBElement<Short>, elemObj.setValue(" + anSetValues[i] + 
                    ") invoked, " + "elemObj.getValue() != " + anSetValues[i]);
            }
        }
        return Status.passed("OKAY");

      ]]></TestCode>
    </TestCase>
</TestGroup>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TestGroup SYSTEM "testgenspec.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<TestGroup ID="minInclusive1_Validate">
    <TestGroupDocumentation>
        <Title><![CDATA[minInclusive1 Validate Tree Content tests]]></Title>
        <Description><![CDATA[
      The tests for validating the content of changed trees got by unmarshalling
      of the minInclusive-1.xsd based XML documents or created dynamically 
      via ObjectFactory.
      The schema defines a float restricted SimpleType with minInclusive value 
      1E-149 that maps to the value 0.0 of value space of float type. Various 
      XML documents specify various values in the element.
      ]]></Description>
    </TestGroupDocumentation>
    <TestGroupAttributes>
        <AttrElem Name="scInfo">@(#)minInclusive-1_Validate.test.xml	1.7 08/01/24</AttrElem>
        <AttrElem Name="testType">JAXBXMLSchemaTest</AttrElem>
    </TestGroupAttributes>
    <CodeSet>
        <Import>jakarta.xml.bind.*</Import>
        <Import>jakarta.xml.bind.TypeConstraintException</Import>
        <SupportCode> 
    final float[] validValues = {0.0F, 1020640E20F, 4710493E-6F, 11125265E-37F, Float.MAX_VALUE
                                , Float.POSITIVE_INFINITY};
    
    final float[] invalidValues = {-1.0F, - Float.MAX_VALUE
                                , Float.NEGATIVE_INFINITY, Float.NaN};
    
    JAXBElement&lt;Float&gt; elemObj;

    Status testInvalid() {
        for (int i = 0; i &lt; invalidValues.length; ++i){
            
                elemObj.setValue(invalidValues[i]);
                Status status = validate(elemObj);
                if (status.isPassed()) {
                    return Status.failed("" + invalidValues[i] + " is unexpectedly valid");
                }
            
        }
        return Status.passed("OK");
    }

    Status testValid() {
        for (int i = 0; i &lt; validValues.length; ++i){
            elemObj.setValue(validValues[i]);
            Status status = validate(elemObj);
            if (!status.isPassed()){
                return Status.failed("" + validValues[i] + " is unexpectedly invalid");
            }
        }
        return Status.passed("OKAY");
    }
      </SupportCode>
        <ExternalSupportClass SourceName="minInclusive-1.xsd"/>
        <ExternalData Type="iodata" SourceName="minInclusive1_Validate.sig"/>
    </CodeSet>
    <TestCase ID="Unmarshalled001">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML float minInclusive-1.xsd, validate unmarshalled then legally changed content tree]]></Title>
            <Description><![CDATA[
The test unmarshalls minInclusive-1-1.xml document, sets 
valid values 0.0, 1020640E20, 4710493E-6, 11125265E-37, Float.MAX_VALUE, 
Float.POSITIVE_INFINITY, Float.NaN for the float restricted SimpleType NISTSchema-float-minInclusive-1 element and 
expects validation to pass. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <ExternalData Type="iodata" SourceName="minInclusive-1-1.xml"/>
            <ExternalData Type="iodata" SourceName="mininclusive1_validate-minInclusive-1-1.jbx"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        elemObj = (JAXBElement<Float>)unmarshal("minInclusive-1-1.xml");
        return testValid();
      ]]></TestCode>
    </TestCase>
    <TestCase ID="Unmarshalled002">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML float minInclusive-1.xsd, validate unmarshalled then illegally changed content tree]]></Title>
            <Description><![CDATA[
The test unmarshalls minInclusive-1-1.xml document, sets the invalid values 
-1.0, -Float.MAX_VALUE, Float.NEGATIVE_INFINITY for the float 
restricted SimpleType NISTSchema-float-minInclusive-1 element and expects 
validation to fail. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <ExternalData Type="iodata" SourceName="minInclusive-1-1.xml"/>
            <ExternalData Type="iodata" SourceName="mininclusive1_validate-minInclusive-1-1.jbx"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        elemObj = (JAXBElement<Float>)unmarshal("minInclusive-1-1.xml");
        return testInvalid();
      ]]></TestCode>
    </TestCase>
    <TestCase ID="Created001">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML float minInclusive-1.xsd, validate created content tree with valid content]]></Title>
            <Description><![CDATA[
The test creates the float restricted SimpleType NISTSchema-float-minInclusive-1 element with
a valid value, sets its value to 0.0, 1020640E20, 4710493E-6, 11125265E-37, Float.MAX_VALUE, 
Float.POSITIVE_INFINITY, Float.NaN then expects validation to pass. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.JAXBException</Import>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        
            elemObj = (JAXBElement<Float>)(new ObjectFactory()).createNISTSchemaFloatMinInclusive1(validValues[0]);
        
        return testValid();
      ]]></TestCode>
    </TestCase>
    <TestCase ID="Created002">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML float minInclusive-1.xsd, validate created content tree with invalid content]]></Title>
            <Description><![CDATA[
The test creates the float restricted SimpleType NISTSchema-float-minInclusive-1 element with
a valid value, sets its value to -1.0, -Float.MAX_VALUE, Float.NEGATIVE_INFINITY
then expects validation to fail. 
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <Import>jakarta.xml.bind.JAXBException</Import>
            <ExternalData Type="iodata" SourceName="minInclusive-1-1.xml"/>
            <ExternalData Type="iodata" SourceName="mininclusive1_validate-minInclusive-1-1.jbx"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[
        
            elemObj = (JAXBElement<Float>)(new ObjectFactory()).createNISTSchemaFloatMinInclusive1(validValues[0]);
        
        return testInvalid();
      ]]></TestCode>
    </TestCase>
</TestGroup>

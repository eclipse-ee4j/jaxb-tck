<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE TestGroup SYSTEM "testgenspec.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<TestGroup ID="minInclusive1_Validate">
    <TestGroupDocumentation>
        <Title><![CDATA[minInclusive1 Validate Tree Content tests ]]></Title>
        <Description><![CDATA[
      The tests for checking the on-demand validator of trees got by unmarshalling
      of a minInclusive-1.xsd based XML document and created dynamically via ObjectFactory. 
      The schema defines a byte restricted SimpleType with minInclusive value -128.
      ]]></Description>
    </TestGroupDocumentation>
    <TestGroupAttributes>
        <AttrElem Name="scInfo">@(#)minInclusive1_Validate.test.xml	1.6 08/01/24</AttrElem>
        <AttrElem Name="testType">JAXBXMLSchemaTest</AttrElem>
    </TestGroupAttributes>
    <CodeSet>
        <Import>jakarta.xml.bind.*</Import>
        <Import>jakarta.xml.bind.TypeConstraintException</Import>
        <SupportCode> 
    
    final byte[] validValues = {(byte)-128, (byte)-10, (byte)0, (byte)120, (byte)127};
    
    JAXBElement&lt;Byte&gt; elemObj;

    Status testValid() {
        for (int i = 0; i &lt; validValues.length; ++i){
            elemObj.setValue(validValues[i]);
            Status status = validate(elemObj);
            if (!status.isPassed()){
                return Status.failed("" + validValues[i] + " is unexpectedly invalid");
            }
        }
        return Status.passed("OKAY");
    }

      </SupportCode>
        <ExternalSupportClass SourceName="minInclusive-1.xsd"/>
        <ExternalData Type="iodata" SourceName="minInclusive1_Validate.sig"/>
    </CodeSet>
    <TestCase ID="Validate001">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML byte minInclusive-1.xsd, validate unmarshalled then legally changed content tree]]></Title>
            <Description><![CDATA[
The test unmarshalls minInclusive-1-1.xml document which specifies
valid value -128 for the byte restricted SimpleType NISTSchema-byte-minInclusive-1
element, sets the values: -127, -10, 0, 120, 127 and expects validation to pass.
         ]]></Description>
        </TestCaseDocumentation>
        <CodeSet>
            <ExternalData Type="iodata" SourceName="minInclusive-1-1.xml"/>
            <ExternalData Type="iodata" SourceName="mininclusive1_validate-minInclusive-1-1.jbx"/>
        </CodeSet>
        <TestCode SourceLang="java"><![CDATA[

        String xmlDocName = "minInclusive-1-1.xml";
        elemObj = (JAXBElement<Byte>)unmarshal(xmlDocName);
        return testValid();

      ]]></TestCode>
    </TestCase>
    <TestCase ID="Validate003">
        <TestCaseDocumentation>
            <Title><![CDATA[NIST XML byte minInclusive-1.xsd validate dynamically created then legally changed content tree ]]></Title>
            <Description><![CDATA[
The test creates an instance of byte restricted SimpleType NISTSchema-byte-minInclusive-1 type,
sets the values: -128, -10, 0, 120, 127 and expects the validation to pass.
         ]]></Description>
        </TestCaseDocumentation>
        <TestCode SourceLang="java"><![CDATA[

        
            elemObj = (JAXBElement<Byte>)(new ObjectFactory()).createNISTSchemaByteMinInclusive1((byte)0);
        
        return testValid();

      ]]></TestCode>
    </TestCase>
</TestGroup>
